import React, { useState, useEffect, useRef } from 'react';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { Link } from 'react-router-dom';
import LeafletMapComponent from '@/components/LeafletMapComponent';
import { calculateArea, convertSqMetersToSotkas } from '@/utils/geometry';
import { toast } from 'sonner';
import { LatLng } from '@/types';

const WalkingModeSimple = () => {
  const { t } = useTranslation();
  const [isMeasuring, setIsMeasuring] = useState<boolean>(false);
  const [trackedPath, setTrackedPath] = useState<LatLng[]>([]);
  const [currentLocation, setCurrentLocation] = useState<LatLng | null>(null);
  const [gpsAccuracy, setGpsAccuracy] = useState<number | null>(null);
  const [calculatedAreaSqMeters, setCalculatedAreaSqMeters] = useState<number>(0);
  const [calculatedAreaSotkas, setCalculatedAreaSotkas] = useState<number>(0);
  
  const watchId = useRef<number | null>(null);

  const startTracking = () => {
    if (!navigator.geolocation) {
      toast.error('GPS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      return;
    }

    setIsMeasuring(true);
    setTrackedPath([]);
    toast.info('–ù–∞—á–∏–Ω–∞–µ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—É—Ç–∏...');

    watchId.current = navigator.geolocation.watchPosition(
      (position) => {
        const { latitude, longitude, accuracy } = position.coords;
        const newLocation = { lat: latitude, lng: longitude };
        
        setCurrentLocation(newLocation);
        setGpsAccuracy(accuracy);
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –∫ –ø—É—Ç–∏
        setTrackedPath(prev => [...prev, newLocation]);
        
        toast.success(`GPS –æ–±–Ω–æ–≤–ª–µ–Ω: ${accuracy.toFixed(0)}–º —Ç–æ—á–Ω–æ—Å—Ç—å`);
      },
      (error) => {
        console.error('GPS Error:', error);
        toast.error('–û—à–∏–±–∫–∞ GPS: ' + error.message);
      },
      {
        enableHighAccuracy: true,
        timeout: 10000,
        maximumAge: 5000
      }
    );
  };

  const stopTracking = () => {
    if (watchId.current) {
      navigator.geolocation.clearWatch(watchId.current);
      watchId.current = null;
    }
    
    setIsMeasuring(false);
    toast.info('–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—É—Ç–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–æ—â–∞–¥—å
    if (trackedPath.length >= 3) {
      calculateAreaFromPath();
    }
  };

  const calculateAreaFromPath = () => {
    if (trackedPath.length < 3) {
      toast.error('–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –º–∏–Ω–∏–º—É–º 3 —Ç–æ—á–∫–∏');
      return;
    }

    try {
      const areaSqMeters = calculateArea(trackedPath);
      const areaSotkas = convertSqMetersToSotkas(areaSqMeters);
      
      setCalculatedAreaSqMeters(areaSqMeters);
      setCalculatedAreaSotkas(areaSotkas);
      
      toast.success(`–ü–ª–æ—â–∞–¥—å —É—á–∞—Å—Ç–∫–∞: ${areaSqMeters.toFixed(1)} –º¬≤ (${areaSotkas.toFixed(2)} —Å–æ—Ç–æ–∫)`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–ª–æ—â–∞–¥–∏');
    }
  };

  const clearPath = () => {
    setTrackedPath([]);
    setCalculatedAreaSqMeters(0);
    setCalculatedAreaSotkas(0);
    toast.info('–ü—É—Ç—å –æ—á–∏—â–µ–Ω');
  };

  useEffect(() => {
    // –û—á–∏—Å—Ç–∫–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    return () => {
      if (watchId.current) {
        navigator.geolocation.clearWatch(watchId.current);
      }
    };
  }, []);

  return (
    <div className="container mx-auto p-4 space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">{t('walkingMode')}</h1>
        <Link to="/">
          <Button variant="outline">‚Üê {t('home')}</Button>
        </Link>
      </div>

      {/* Status */}
      <div className="bg-blue-50 p-4 rounded-lg">
        <div className="flex items-center justify-between mb-2">
          <span className="font-medium">–°—Ç–∞—Ç—É—Å –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:</span>
          <div className={`px-3 py-1 rounded-full text-sm ${
            isMeasuring ? 'bg-green-100 text-green-800' : 'bg-gray-100 text-gray-800'
          }`}>
            {isMeasuring ? 'üü¢ –ò–¥–µ—Ç –∏–∑–º–µ—Ä–µ–Ω–∏–µ' : '‚ö™ –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}
          </div>
        </div>
        {currentLocation && (
          <div className="text-sm text-green-600">
            üìç –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è: {currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}
            {gpsAccuracy && <span className="ml-2">¬±{gpsAccuracy.toFixed(0)}–º</span>}
          </div>
        )}
        {trackedPath.length > 0 && (
          <div className="text-sm text-blue-600 mt-1">
            üö∂ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–æ—á–µ–∫: {trackedPath.length}
          </div>
        )}
      </div>

      {/* Map */}
      <LeafletMapComponent
        markers={trackedPath}
        center={currentLocation || { lat: 55.7558, lng: 37.6173 }}
        zoom={currentLocation ? 16 : 10}
        mapType="hybrid"
      />

      {/* Controls */}
      <div className="grid grid-cols-2 md:grid-cols-4 gap-2">
        {!isMeasuring ? (
          <Button onClick={startTracking} className="bg-green-600 hover:bg-green-700">
            ‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ
          </Button>
        ) : (
          <Button onClick={stopTracking} className="bg-red-600 hover:bg-red-700">
            ‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
          </Button>
        )}
        
        <Button onClick={calculateAreaFromPath} disabled={trackedPath.length < 3} variant="outline">
          üìê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å
        </Button>
        
        <Button onClick={clearPath} disabled={trackedPath.length === 0} variant="outline">
          üßπ –û—á–∏—Å—Ç–∏—Ç—å –ø—É—Ç—å
        </Button>
        
        <Button disabled variant="outline">
          üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å (—Å–∫–æ—Ä–æ)
        </Button>
      </div>

      {/* Results */}
      {calculatedAreaSqMeters > 0 && (
        <div className="bg-green-50 p-4 rounded-lg">
          <h3 className="font-semibold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è –ø—Ä–æ–≥—É–ª–∫–æ–π:</h3>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-gray-600">–ü–ª–æ—â–∞–¥—å –≤ –º¬≤:</span>
              <div className="font-medium">{calculatedAreaSqMeters.toFixed(1)} –º¬≤</div>
            </div>
            <div>
              <span className="text-gray-600">–ü–ª–æ—â–∞–¥—å –≤ —Å–æ—Ç–∫–∞—Ö:</span>
              <div className="font-medium">{calculatedAreaSotkas.toFixed(2)} —Å–æ—Ç–æ–∫</div>
            </div>
          </div>
          <div className="mt-2 text-xs text-gray-500">
            –¢–æ—á–µ–∫ –≤ –ø—É—Ç–∏: {trackedPath.length}
          </div>
        </div>
      )}

      {/* Instructions */}
      <div className="bg-yellow-50 p-4 rounded-lg">
        <h3 className="font-semibold mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</h3>
        <ol className="text-sm space-y-1 list-decimal list-inside">
          <li>–ù–∞–∂–º–∏—Ç–µ "–ù–∞—á–∞—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ" –∏ –∏–¥–∏—Ç–µ –ø–æ –ø–µ—Ä–∏–º–µ—Ç—Ä—É —É—á–∞—Å—Ç–∫–∞</li>
          <li>GPS –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à –ø—É—Ç—å</li>
          <li>–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –∏–¥—Ç–∏ —Ç–æ—á–Ω–æ –ø–æ –≥—Ä–∞–Ω–∏—Ü–µ —É—á–∞—Å—Ç–∫–∞</li>
          <li>–ù–∞–∂–º–∏—Ç–µ "–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å" –∫–æ–≥–¥–∞ –≤–µ—Ä–Ω–µ—Ç–µ—Å—å –∫ –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–µ</li>
          <li>–ü–ª–æ—â–∞–¥—å –±—É–¥–µ—Ç —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</li>
        </ol>
      </div>
    </div>
  );
};

export default WalkingModeSimple;
