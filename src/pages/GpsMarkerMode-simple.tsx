import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { SoundButton } from '@/components/ui/sound-button';
import { Input } from '@/components/ui/input';
import { Link } from 'react-router-dom';
import LeafletMapComponent from '@/components/LeafletMapComponent';
import { calculateArea, convertSqMetersToSotkas } from '@/utils/geometry';
import { toast } from 'sonner';
import { LatLng } from '@/types';
import { playSound } from '@/utils/sound';

// –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
const saveMeasurement = (name: string, areaSqMeters: number, areaSotkas: number, coordinates: LatLng[]) => {
  try {
    console.log('–ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è:', { name, areaSqMeters, areaSotkas, coordinates });
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å localStorage
    if (typeof Storage === 'undefined' || !window.localStorage) {
      console.warn('localStorage –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      return false;
    }
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    let measurements = [];
    try {
      const stored = window.localStorage.getItem('landMeasurements');
      measurements = stored ? JSON.parse(stored) : [];
    } catch (parseError) {
      console.warn('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ localStorage:', parseError);
      measurements = [];
    }
    
    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:', measurements);
    
    const newMeasurement = {
      id: Date.now().toString(),
      name: name || `–ò–∑–º–µ—Ä–µ–Ω–∏–µ –æ—Ç ${new Date().toLocaleDateString()}`,
      areaSqMeters,
      areaSotkas,
      date: new Date().toISOString(),
      coordinates
    };
    
    console.log('–ù–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ:', newMeasurement);
    
    measurements.push(newMeasurement);
    
    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    try {
      window.localStorage.setItem('landMeasurements', JSON.stringify(measurements));
      console.log('–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage');
      return true;
    } catch (storageError) {
      console.warn('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ localStorage:', storageError);
      // –í—Ä–µ–º–µ–Ω–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
      (window as any).tempMeasurements = measurements;
      return true;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    return false;
  }
};

const GpsMarkerModeSimple = () => {
  const { t } = useTranslation();
  const [markers, setMarkers] = useState<LatLng[]>([]);
  const [currentLocation, setCurrentLocation] = useState<LatLng | null>(null);
  const [gpsAccuracy, setGpsAccuracy] = useState<number | null>(null);
  const [calculatedAreaSqMeters, setCalculatedAreaSqMeters] = useState<number>(0);
  const [calculatedAreaSotkas, setCalculatedAreaSotkas] = useState<number>(0);
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  const [saveName, setSaveName] = useState('');
  const [showManualInput, setShowManualInput] = useState(false);
  const [manualLat, setManualLat] = useState('');
  const [manualLng, setManualLng] = useState('');
  
  // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ GPS
  const [showCalibration, setShowCalibration] = useState(false);
  const [calibrationPoints, setCalibrationPoints] = useState<{gps: LatLng, real: LatLng}[]>([]);
  const [calibrationOffset, setCalibrationOffset] = useState<{lat: number, lng: number} | null>(null);
  const [tempCalibrationGPS, setTempCalibrationGPS] = useState<LatLng | null>(null);
  const [tempCalibrationReal, setTempCalibrationReal] = useState({lat: '', lng: ''});

  // –°—É–ø–µ—Ä-–∞–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è GPS —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏
  const getCurrentLocation = () => {
    if (!navigator.geolocation) {
      playSound('error');
      toast.error('GPS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      return;
    }

    toast.info('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –°–£–ü–ï–†-–¢–û–ß–ù–´–ô GPS —Ä–µ–∂–∏–º...');
    
    let attempts = 0;
    const maxAttempts = 10;
    let bestAccuracy = Infinity;
    let bestPosition: GeolocationPosition | null = null;
    let watchId: number | null = null;
    
    const startTime = Date.now();
    const maxWatchTime = 60000; // 1 –º–∏–Ω—É—Ç–∞ –º–∞–∫—Å–∏–º—É–º
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º watchPosition –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    watchId = navigator.geolocation.watchPosition(
      (position) => {
        attempts++;
        const accuracy = position.coords.accuracy;
        
        toast.info(`üîÑ GPS –ø–æ–ø—ã—Ç–∫–∞ ${attempts}: ¬±${accuracy.toFixed(0)}–º`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (accuracy < bestAccuracy) {
          bestAccuracy = accuracy;
          bestPosition = position;
          
          const { latitude, longitude } = position.coords;
          const rawLocation = { lat: latitude, lng: longitude };
          const newLocation = applyCalibratedCoordinates(rawLocation);
          
          setCurrentLocation(newLocation);
          setGpsAccuracy(accuracy);
          
          if (accuracy <= 5) {
            // –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∏—Å–∫
            if (watchId) navigator.geolocation.clearWatch(watchId);
            playSound('success');
            toast.success(`üéØ –°–£–ü–ï–†-–¢–û–ß–ù–û–°–¢–¨ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞: ¬±${accuracy.toFixed(1)}–º!`);
            return;
          } else if (accuracy <= 15) {
            // –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –µ—â–µ –Ω–µ–º–Ω–æ–≥–æ
            toast.success(`‚úÖ –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ¬±${accuracy.toFixed(0)}–º (–∏—â–µ–º –ª—É—á—à–µ...)`);
          } else if (accuracy <= 50) {
            toast.info(`üìç –•–æ—Ä–æ—à–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ¬±${accuracy.toFixed(0)}–º (–∏—â–µ–º –ª—É—á—à–µ...)`);
          } else {
            toast.warning(`‚ö†Ô∏è –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è: ¬±${accuracy.toFixed(0)}–º (–ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–∏—Å–∫...)`);
          }
        }
        
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ—Å–ª–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –ø–æ–ø—ã—Ç–æ–∫
        if (attempts >= maxAttempts || Date.now() - startTime > maxWatchTime) {
          if (watchId) navigator.geolocation.clearWatch(watchId);
          
          if (bestPosition) {
            playSound('gps-beep');
            if (bestAccuracy <= 10) {
              toast.success(`üéØ –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ¬±${bestAccuracy.toFixed(0)}–º (${attempts} –ø–æ–ø—ã—Ç–æ–∫)`);
            } else if (bestAccuracy <= 50) {
              toast.success(`‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ¬±${bestAccuracy.toFixed(0)}–º (${attempts} –ø–æ–ø—ã—Ç–æ–∫)`);
            } else {
              toast.warning(`‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å: ¬±${bestAccuracy.toFixed(0)}–º (${attempts} –ø–æ–ø—ã—Ç–æ–∫)`);
            }
          } else {
            toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
            playSound('error');
          }
        }
      },
      (error) => {
        if (watchId) navigator.geolocation.clearWatch(watchId);
        
        console.error('GPS Error:', error);
        let errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ GPS';
        switch(error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.';
            break;
          case error.TIMEOUT:
            errorMessage = '–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è GPS –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            break;
          default:
            errorMessage = `–û—à–∏–±–∫–∞ GPS: ${error.message}`;
        }
        
        toast.error(errorMessage);
        playSound('error');
      },
      {
        enableHighAccuracy: true,     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
        timeout: 60000,              // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 1 –º–∏–Ω—É—Ç—ã
        maximumAge: 0                // –ù–∏–∫–æ–≥–¥–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à
      }
    );
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
    setTimeout(() => {
      if (watchId) {
        navigator.geolocation.clearWatch(watchId);
        if (bestPosition) {
          toast.info(`‚è∞ –í—Ä–µ–º—è –≤—ã—à–ª–æ. –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ¬±${bestAccuracy.toFixed(0)}–º`);
        }
      }
    }, maxWatchTime);
  };

  // Fallback GPS –º–µ—Ç–æ–¥ —Å –ø–æ–Ω–∏–∂–µ–Ω–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
  const getCurrentLocationFallback = () => {
    if (!navigator.geolocation) {
      playSound('error');
      toast.error('GPS –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —ç—Ç–∏–º –±—Ä–∞—É–∑–µ—Ä–æ–º');
      return;
    }

    toast.info('üì° –ü–æ–ª—É—á–µ–Ω–∏–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (—Ç–µ—Ä–ø–µ–ª–∏–≤—ã–π —Ä–µ–∂–∏–º)...');
    
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const { latitude, longitude, accuracy } = position.coords;
        const rawLocation = { lat: latitude, lng: longitude };
        const newLocation = applyCalibratedCoordinates(rawLocation);
        
        setCurrentLocation(newLocation);
        setGpsAccuracy(accuracy);
        
        playSound('gps-beep');
        
        if (accuracy <= 50) {
          toast.success(`‚úÖ GPS –ø–æ–ª—É—á–µ–Ω! –¢–æ—á–Ω–æ—Å—Ç—å: ¬±${accuracy.toFixed(0)}–º`);
        } else if (accuracy <= 200) {
          toast.info(`üìç GPS –ø–æ–ª—É—á–µ–Ω (—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥–Ω—è—è): ¬±${accuracy.toFixed(0)}–º`);
        } else {
          toast.warning(`‚ö†Ô∏è GPS –ø–æ–ª—É—á–µ–Ω (—Ç–æ—á–Ω–æ—Å—Ç—å –Ω–∏–∑–∫–∞—è): ¬±${accuracy.toFixed(0)}–º`);
        }
      },
      (error) => {
        console.error('GPS Fallback Error:', error);
        playSound('error');
        
        let errorMessage = 'GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
        switch(error.code) {
          case error.PERMISSION_DENIED:
            errorMessage = '–î–æ—Å—Ç—É–ø –∫ GPS –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
            break;
          case error.POSITION_UNAVAILABLE:
            errorMessage = 'GPS –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–¥–æ–π—Ç–∏ –∫ –æ–∫–Ω—É –∏–ª–∏ –≤—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É.';
            break;
          case error.TIMEOUT:
            errorMessage = 'GPS —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
            break;
          default:
            errorMessage = `–û—à–∏–±–∫–∞ GPS: ${error.message}`;
        }
        
        toast.error(errorMessage);
      },
      {
        enableHighAccuracy: false,   // –ú–µ–Ω–µ–µ —Ç–æ—á–Ω—ã–π, –Ω–æ –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã–π
        timeout: 120000,             // 2 –º–∏–Ω—É—Ç—ã –æ–∂–∏–¥–∞–Ω–∏—è
        maximumAge: 300000          // –ú–æ–∂–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à –¥–æ 5 –º–∏–Ω—É—Ç
      }
    );
  };

  const addMarker = (lat?: number, lng?: number) => {
    if (lat && lng) {
      // –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
      const newMarker = { lat, lng };
      setMarkers(prev => [...prev, newMarker]);
      playSound('marker-add');
      toast.success(`–ú–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω: ${lat.toFixed(6)}, ${lng.toFixed(6)}`);
    } else if (currentLocation) {
      // –î–æ–±–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä –ø–æ —Ç–µ–∫—É—â–µ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
      setMarkers(prev => [...prev, currentLocation]);
      playSound('marker-add');
      toast.success('–ú–∞—Ä–∫–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º');
    } else {
      playSound('error');
      toast.error('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
    }
  };

  const deleteLastMarker = () => {
    if (markers.length > 0) {
      setMarkers(prev => prev.slice(0, -1));
      toast.info('–ü–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ä–∫–µ—Ä —É–¥–∞–ª–µ–Ω');
    }
  };

  const clearAllMarkers = () => {
    setMarkers([]);
    setCalculatedAreaSqMeters(0);
    setCalculatedAreaSotkas(0);
    toast.info('–í—Å–µ –º–∞—Ä–∫–µ—Ä—ã –æ—á–∏—â–µ–Ω—ã');
  };

  const calculateAreaFromMarkers = () => {
    if (markers.length < 3) {
      playSound('error');
      toast.error('–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏ –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 –º–∞—Ä–∫–µ—Ä–∞');
      return;
    }

    try {
      const areaSqMeters = calculateArea(markers);
      const areaSotkas = convertSqMetersToSotkas(areaSqMeters);
      
      setCalculatedAreaSqMeters(areaSqMeters);
      setCalculatedAreaSotkas(areaSotkas);
      
      playSound('calculate');
      toast.success(`–ü–ª–æ—â–∞–¥—å: ${areaSqMeters.toFixed(1)} –º¬≤ (${areaSotkas.toFixed(2)} —Å–æ—Ç–æ–∫)`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –ø–ª–æ—â–∞–¥–∏:', error);
      playSound('error');
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–ª–æ—â–∞–¥–∏');
    }
  };

  const handleSave = () => {
    if (calculatedAreaSqMeters === 0) {
      toast.error('–°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –ø–ª–æ—â–∞–¥—å');
      return;
    }
    setShowSaveDialog(true);
  };

  const confirmSave = () => {
    if (saveMeasurement(saveName, calculatedAreaSqMeters, calculatedAreaSotkas, markers)) {
      toast.success('–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
      setShowSaveDialog(false);
      setSaveName('');
      // –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      clearAllMarkers();
    } else {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è GPS —á–µ—Ä–µ–∑ IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
  const getLocationByIP = async () => {
    toast.info('üåê –ü—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP...');
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP
      const response = await fetch('https://ipapi.co/json/');
      const data = await response.json();
      
      if (data.latitude && data.longitude) {
        const newLocation = { lat: data.latitude, lng: data.longitude };
        setCurrentLocation(newLocation);
        setGpsAccuracy(data.accuracy || 1000); // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å IP-–≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        
        playSound('gps-beep');
        toast.success(`üåê –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP: ${data.city}, ${data.region}, ${data.country}`);
        toast.info(`üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: ${data.latitude.toFixed(6)}, ${data.longitude.toFixed(6)}`);
      } else {
        toast.error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –ø–æ IP');
      }
    } catch (error) {
      console.error('IP Location Error:', error);
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ IP');
    }
  };

  const setManualCoordinates = () => {
    const lat = parseFloat(manualLat);
    const lng = parseFloat(manualLng);
    
    if (isNaN(lat) || isNaN(lng)) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
      return;
    }
    
    if (lat < -90 || lat > 90 || lng < -180 || lng > 180) {
      toast.error('–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞');
      return;
    }
    
    const newLocation = { lat, lng };
    setCurrentLocation(newLocation);
    setGpsAccuracy(1); // –†—É—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å
    setShowManualInput(false);
    setManualLat('');
    setManualLng('');
    
    playSound('success');
    toast.success('‚úÖ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é (—Ç–æ—á–Ω–æ—Å—Ç—å: ¬±1–º)');
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ GPS
  const calibrateGPS = () => {
    if (!tempCalibrationGPS) {
      toast.error('–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
      return;
    }
    
    const realLat = parseFloat(tempCalibrationReal.lat);
    const realLng = parseFloat(tempCalibrationReal.lng);
    
    if (isNaN(realLat) || isNaN(realLng)) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã');
      return;
    }
    
    // –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
    const offsetLat = realLat - tempCalibrationGPS.lat;
    const offsetLng = realLng - tempCalibrationGPS.lng;
    
    setCalibrationOffset({ lat: offsetLat, lng: offsetLng });
    setCalibrationPoints(prev => [...prev, {
      gps: tempCalibrationGPS,
      real: { lat: realLat, lng: realLng }
    }]);
    
    setShowCalibration(false);
    setTempCalibrationGPS(null);
    setTempCalibrationReal({lat: '', lng: ''});
    
    playSound('success');
    toast.success(`üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞! –°–º–µ—â–µ–Ω–∏–µ: ${offsetLat.toFixed(6)}, ${offsetLng.toFixed(6)}`);
    toast.info('–¢–µ–ø–µ—Ä—å –≤—Å–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è');
  };

  // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–∞–ª–∏–±—Ä–æ–≤–∫—É –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
  const applyCalibratedCoordinates = (coords: LatLng): LatLng => {
    if (!calibrationOffset) return coords;
    
    return {
      lat: coords.lat + calibrationOffset.lat,
      lng: coords.lng + calibrationOffset.lng
    };
  };

  // –°–±—Ä–æ—Å –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  const resetCalibration = () => {
    setCalibrationOffset(null);
    setCalibrationPoints([]);
    toast.info('–ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞');
  };

  // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  const addCalibrationPoint = (isReal: boolean) => {
    if (!currentLocation) return;
    
    const newPoint = { gps: currentLocation, real: currentLocation };
    if (isReal) {
      // –ï—Å–ª–∏ —Ä–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞, —Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
      setCalibrationPoints(prev => [...prev, newPoint]);
      playSound('success');
      toast.success('–†–µ–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏');
    } else {
      // –ï—Å–ª–∏ GPS —Ç–æ—á–∫–∞, —Ç–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
      setTempCalibrationGPS(currentLocation);
      playSound('gps-beep');
      toast.info('–°–µ–π—á–∞—Å –ø–æ–ª—É—á–∏—Ç–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏');
    }
  };

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Ç–æ—á–∫–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏
  const confirmTempCalibration = () => {
    if (!tempCalibrationGPS || !currentLocation) return;
    
    const newPoint = { gps: tempCalibrationGPS, real: currentLocation };
    setCalibrationPoints(prev => [...prev, newPoint]);
    setTempCalibrationGPS(null);
    playSound('success');
    toast.success('–¢–æ—á–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞');
  };

  return (
    <div className="container mx-auto p-4 space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">{t('gpsMarkerMode')}</h1>
        <Link to="/">
          <SoundButton variant="outline" soundType="click">‚Üê {t('home')}</SoundButton>
        </Link>
      </div>

      {/* GPS Status */}
      <div className="bg-blue-50 p-4 rounded-lg">
        <div className="flex items-center justify-between mb-2">
          <span className="font-medium">GPS –°—Ç–∞—Ç—É—Å:</span>
          <div className="flex gap-2 flex-wrap">
            <SoundButton onClick={getCurrentLocation} size="sm" soundType="gps-beep">
              üéØ –°–£–ü–ï–†-–¢–û–ß–ù–´–ô GPS
            </SoundButton>
            <SoundButton onClick={getCurrentLocationFallback} size="sm" variant="outline" soundType="gps-beep">
              üì° –¢–µ—Ä–ø–µ–ª–∏–≤—ã–π GPS
            </SoundButton>
            <SoundButton onClick={getLocationByIP} size="sm" variant="outline" soundType="gps-beep">
              üåê –ü–æ IP
            </SoundButton>
            <SoundButton onClick={() => setShowManualInput(true)} size="sm" variant="outline" soundType="click">
              ‚úèÔ∏è –í—Ä—É—á–Ω—É—é
            </SoundButton>
            <SoundButton onClick={() => setShowCalibration(true)} size="sm" variant="outline" soundType="click">
              üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞
            </SoundButton>
          </div>
        </div>
        {currentLocation ? (
          <div className="text-sm text-green-600">
            üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {currentLocation.lat.toFixed(6)}, {currentLocation.lng.toFixed(6)}
            {calibrationOffset && (
              <span className="ml-2 text-blue-600">üéØ (–∫–∞–ª–∏–±—Ä–æ–≤–∞–Ω–æ)</span>
            )}
            {gpsAccuracy && (
              <span className="ml-2">
                {gpsAccuracy <= 10 ? 'üéØ' : gpsAccuracy <= 100 ? '‚úÖ' : '‚ö†Ô∏è'}
                ¬±{gpsAccuracy.toFixed(0)}–º
              </span>
            )}
          </div>
        ) : (
          <div className="text-sm text-gray-500">GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã</div>
        )}
        <div className="text-xs text-gray-400 mt-1">
          üí° "–°–£–ü–ï–†-–¢–û–ß–ù–´–ô GPS" - –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ç–æ—á–Ω–æ—Å—Ç–∏, "–¢–µ—Ä–ø–µ–ª–∏–≤—ã–π GPS" - –µ—Å–ª–∏ –ø–µ—Ä–≤—ã–π –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
        </div>
        {calibrationOffset && (
          <div className="text-xs text-blue-600 mt-1">
            üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞: —Å–º–µ—â–µ–Ω–∏–µ {calibrationOffset.lat.toFixed(6)}, {calibrationOffset.lng.toFixed(6)}
            <SoundButton onClick={resetCalibration} size="sm" variant="outline" className="ml-2 text-xs" soundType="click">
              –°–±—Ä–æ—Å–∏—Ç—å
            </SoundButton>
          </div>
        )}
      </div>

      {/* Map */}
      <LeafletMapComponent
        markers={markers}
        center={currentLocation || { lat: 55.7558, lng: 37.6173 }}
        zoom={currentLocation ? 16 : 10}
        mapType="hybrid"
      />

      {/* Controls */}
      <div className="grid grid-cols-2 md:grid-cols-5 gap-2">
        <SoundButton onClick={() => addMarker()} disabled={!currentLocation} soundType="marker-add">
          üìç –ü–æ—Å—Ç–∞–≤–∏—Ç—å –º–∞—Ä–∫–µ—Ä
        </SoundButton>
        <SoundButton onClick={deleteLastMarker} variant="outline" disabled={markers.length === 0} soundType="delete">
          üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π
        </SoundButton>
        <SoundButton onClick={clearAllMarkers} variant="outline" disabled={markers.length === 0} soundType="delete">
          üßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ
        </SoundButton>
        <SoundButton onClick={calculateAreaFromMarkers} disabled={markers.length < 3} soundType="calculate">
          üìê –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ø–ª–æ—â–∞–¥—å
        </SoundButton>
        <SoundButton onClick={handleSave} disabled={calculatedAreaSqMeters === 0} className="bg-green-600 hover:bg-green-700" soundType="success">
          üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
        </SoundButton>
      </div>

      {/* Results */}
      {calculatedAreaSqMeters > 0 && (
        <div className="bg-green-50 p-4 rounded-lg">
          <h3 className="font-semibold mb-2">–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è:</h3>
          <div className="grid grid-cols-2 gap-4 text-sm">
            <div>
              <span className="text-gray-600">–ü–ª–æ—â–∞–¥—å –≤ –º¬≤:</span>
              <div className="font-medium">{calculatedAreaSqMeters.toFixed(1)} –º¬≤</div>
            </div>
            <div>
              <span className="text-gray-600">–ü–ª–æ—â–∞–¥—å –≤ —Å–æ—Ç–∫–∞—Ö:</span>
              <div className="font-medium">{calculatedAreaSotkas.toFixed(2)} —Å–æ—Ç–æ–∫</div>
            </div>
          </div>
          <div className="mt-2 text-xs text-gray-500">
            –ú–∞—Ä–∫–µ—Ä–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {markers.length}
          </div>
        </div>
      )}

      {/* Markers List */}
      {markers.length > 0 && (
        <div className="bg-gray-50 p-4 rounded-lg">
          <h3 className="font-semibold mb-2">–ú–∞—Ä–∫–µ—Ä—ã ({markers.length}):</h3>
          <div className="max-h-32 overflow-y-auto space-y-1">
            {markers.map((marker, index) => (
              <div key={index} className="text-xs bg-white p-2 rounded border">
                –ú–∞—Ä–∫–µ—Ä {index + 1}: {marker.lat.toFixed(6)}, {marker.lng.toFixed(6)}
              </div>
            ))}
          </div>
        </div>
      )}

      {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ */}
      {calibrationPoints.length > 0 && (
        <div className="bg-blue-50 p-4 rounded-lg">
          <h3 className="font-semibold mb-2">üéØ –ò—Å—Ç–æ—Ä–∏—è –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏:</h3>
          <div className="max-h-32 overflow-y-auto space-y-2">
            {calibrationPoints.map((point, index) => (
              <div key={index} className="text-xs bg-white p-2 rounded border">
                <div>–¢–æ—á–∫–∞ {index + 1}:</div>
                <div>GPS: {point.gps.lat.toFixed(6)}, {point.gps.lng.toFixed(6)}</div>
                <div>–†–µ–∞–ª—å–Ω—ã–µ: {point.real.lat.toFixed(6)}, {point.real.lng.toFixed(6)}</div>
                <div>–°–º–µ—â–µ–Ω–∏–µ: {(point.real.lat - point.gps.lat).toFixed(6)}, {(point.real.lng - point.gps.lng).toFixed(6)}</div>
              </div>
            ))}
          </div>
          <div className="mt-2 text-xs text-gray-500">
            –¢–æ—á–µ–∫ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏: {calibrationPoints.length}
          </div>
        </div>
      )}

      {/* –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      {showSaveDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold mb-4">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞:</label>
                <Input
                  value={saveName}
                  onChange={(e) => setSaveName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–∞—á–Ω—ã–π —É—á–∞—Å—Ç–æ–∫"
                  className="w-full"
                />
              </div>
              
              <div className="bg-gray-50 p-3 rounded text-sm">
                <div>–ü–ª–æ—â–∞–¥—å: {calculatedAreaSqMeters.toFixed(1)} –º¬≤</div>
                <div>–í —Å–æ—Ç–∫–∞—Ö: {calculatedAreaSotkas.toFixed(2)} —Å–æ—Ç–æ–∫</div>
                <div>–ú–∞—Ä–∫–µ—Ä–æ–≤: {markers.length}</div>
              </div>
            </div>
            
            <div className="flex gap-2 mt-6">
              <SoundButton onClick={() => setShowSaveDialog(false)} variant="outline" className="flex-1" soundType="click">
                –û—Ç–º–µ–Ω–∞
              </SoundButton>
              <SoundButton onClick={confirmSave} className="flex-1 bg-green-600 hover:bg-green-700" soundType="success">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </SoundButton>
            </div>
          </div>
        </div>
      )}

      {/* –î–∏–∞–ª–æ–≥ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç */}
      {showManualInput && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold mb-4">‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Ä—É—á–Ω—É—é</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">–®–∏—Ä–æ—Ç–∞ (Latitude):</label>
                <Input
                  value={manualLat}
                  onChange={(e) => setManualLat(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 48.486810"
                  className="w-full"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">–î–æ–ª–≥–æ—Ç–∞ (Longitude):</label>
                <Input
                  value={manualLng}
                  onChange={(e) => setManualLng(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 35.179725"
                  className="w-full"
                />
              </div>
              
              <div className="bg-gray-50 p-3 rounded text-sm">
                <div className="font-medium mb-1">üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</div>
                <div>‚Ä¢ –û—Ç–∫—Ä–æ–π—Ç–µ Google Maps</div>
                <div>‚Ä¢ –ù–∞–π–¥–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –º–µ—Å—Ç–æ</div>
                <div>‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π –º—ã—à–∏</div>
                <div>‚Ä¢ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</div>
              </div>
            </div>
            
            <div className="flex gap-2 mt-6">
              <SoundButton onClick={() => setShowManualInput(false)} variant="outline" className="flex-1" soundType="click">
                –û—Ç–º–µ–Ω–∞
              </SoundButton>
              <SoundButton onClick={setManualCoordinates} className="flex-1 bg-blue-600 hover:bg-blue-700" soundType="success">
                –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å
              </SoundButton>
            </div>
          </div>
        </div>
      )}

      {/* –î–∏–∞–ª–æ–≥ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ GPS */}
      {showCalibration && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold mb-4">üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞ GPS</h3>
            
            <div className="space-y-4">
              <div className="bg-blue-50 p-3 rounded text-sm">
                <div className="font-medium mb-2">–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ:</div>
                <div>1. –í—Å—Ç–∞–Ω—å—Ç–µ –Ω–∞ –∏–∑–≤–µ—Å—Ç–Ω—É—é —Ç–æ—á–∫—É</div>
                <div>2. –ü–æ–ª—É—á–∏—Ç–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã</div>
                <div>3. –í–≤–µ–¥–∏—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ç–æ—á–∫–∏</div>
                <div>4. –°–∏—Å—Ç–µ–º–∞ –≤—ã—á–∏—Å–ª–∏—Ç —Å–º–µ—â–µ–Ω–∏–µ</div>
              </div>
              
              <div>
                <div className="flex gap-2 mb-2">
                  <SoundButton 
                    onClick={() => {
                      getCurrentLocation();
                      setTimeout(() => {
                        setTempCalibrationGPS(currentLocation);
                      }, 1000);
                    }} 
                    size="sm" 
                    soundType="gps-beep"
                  >
                    üì° –ü–æ–ª—É—á–∏—Ç—å GPS
                  </SoundButton>
                  {tempCalibrationGPS && (
                    <span className="text-xs text-green-600 self-center">
                      ‚úÖ GPS: {tempCalibrationGPS.lat.toFixed(6)}, {tempCalibrationGPS.lng.toFixed(6)}
                    </span>
                  )}
                </div>
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">–†–µ–∞–ª—å–Ω–∞—è —à–∏—Ä–æ—Ç–∞:</label>
                <Input
                  value={tempCalibrationReal.lat}
                  onChange={(e) => setTempCalibrationReal(prev => ({...prev, lat: e.target.value}))}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 48.460123"
                  className="w-full"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium mb-1">–†–µ–∞–ª—å–Ω–∞—è –¥–æ–ª–≥–æ—Ç–∞:</label>
                <Input
                  value={tempCalibrationReal.lng}
                  onChange={(e) => setTempCalibrationReal(prev => ({...prev, lng: e.target.value}))}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: 35.033456"
                  className="w-full"
                />
              </div>
              
              <div className="bg-yellow-50 p-3 rounded text-sm">
                <div className="font-medium mb-1">üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ—á–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</div>
                <div>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π GPS-–ø—Ä–∏–µ–º–Ω–∏–∫</div>
                <div>‚Ä¢ –ò–ª–∏ –Ω–∞–π–¥–∏—Ç–µ —Ç–æ—á–∫—É –Ω–∞ Google Earth</div>
                <div>‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–µ–æ–¥–µ–∑–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏</div>
              </div>
            </div>
            
            <div className="flex gap-2 mt-6">
              <SoundButton onClick={() => setShowCalibration(false)} variant="outline" className="flex-1" soundType="click">
                –û—Ç–º–µ–Ω–∞
              </SoundButton>
              <SoundButton 
                onClick={calibrateGPS} 
                disabled={!tempCalibrationGPS || !tempCalibrationReal.lat || !tempCalibrationReal.lng}
                className="flex-1 bg-blue-600 hover:bg-blue-700" 
                soundType="success"
              >
                üéØ –ö–∞–ª–∏–±—Ä–æ–≤–∞—Ç—å
              </SoundButton>
            </div>
          </div>
        </div>
      )}

      {/* –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏ */}
      {tempCalibrationGPS && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold mb-4">üìç –í—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏</h3>
            
            <div className="space-y-4">
              <div className="text-sm text-gray-500">
                –¢–µ–∫—É—â–∏–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω—ã –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–æ—á–∫–∞ –∫–∞–ª–∏–±—Ä–æ–≤–∫–∏.
              </div>
              
              <div className="bg-gray-50 p-3 rounded text-sm">
                <div className="font-medium mb-1">–¢–µ–∫—É—â–∏–µ GPS –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:</div>
                <div>
                  {tempCalibrationGPS.lat.toFixed(6)}, {tempCalibrationGPS.lng.toFixed(6)}
                </div>
              </div>
            </div>
            
            <div className="flex gap-2 mt-6">
              <SoundButton onClick={() => setTempCalibrationGPS(null)} variant="outline" className="flex-1" soundType="click">
                –û—Ç–º–µ–Ω–∞
              </SoundButton>
              <SoundButton onClick={confirmTempCalibration} className="flex-1 bg-blue-600 hover:bg-blue-700" soundType="success">
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å
              </SoundButton>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default GpsMarkerModeSimple;
