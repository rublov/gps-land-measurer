import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { SoundButton } from '@/components/ui/sound-button';
import { Link } from 'react-router-dom';
import { toast } from 'sonner';
import { playSound } from '@/utils/sound';

interface Measurement {
  id: string;
  name: string;
  areaSqMeters: number;
  areaSotkas: number;
  date: string;
  coordinates?: { lat: number; lng: number }[];
}

// –ü—Ä–æ—Å—Ç—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å localStorage
const loadMeasurements = (): Measurement[] => {
  try {
    const stored = localStorage.getItem('landMeasurements');
    console.log('–ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑ localStorage:', stored);
    const parsed = stored ? JSON.parse(stored) : [];
    console.log('–†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:', parsed);
    return parsed;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π:', error);
    return [];
  }
};

const deleteMeasurement = (id: string): void => {
  try {
    const measurements = loadMeasurements();
    const filtered = measurements.filter(m => m.id !== id);
    localStorage.setItem('landMeasurements', JSON.stringify(filtered));
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è:', error);
  }
};

const clearAllMeasurements = (): void => {
  try {
    localStorage.removeItem('landMeasurements');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏–∑–º–µ—Ä–µ–Ω–∏–π:', error);
  }
};

const MeasurementHistorySimple = () => {
  const { t } = useTranslation();
  const [measurements, setMeasurements] = useState<Measurement[]>([]);
  const [selectedMeasurement, setSelectedMeasurement] = useState<Measurement | null>(null);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = () => {
    const data = loadMeasurements();
    setMeasurements(data);
  };

  const handleDelete = (id: string) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ?')) {
      deleteMeasurement(id);
      loadData();
      toast.success('–ò–∑–º–µ—Ä–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ');
    }
  };

  const handleClearAll = () => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∏–∑–º–µ—Ä–µ–Ω–∏—è? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.')) {
      clearAllMeasurements();
      setMeasurements([]);
      toast.success('–í—Å–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã');
    }
  };

  const formatDate = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('ru-RU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
    } catch (error) {
      return dateString;
    }
  };

  const exportToText = () => {
    if (measurements.length === 0) {
      toast.error('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞');
      return;
    }

    let text = '–ò–°–¢–û–†–ò–Ø –ò–ó–ú–ï–†–ï–ù–ò–ô –ó–ï–ú–õ–ò\\n';
    text += '================================\\n\\n';
    
    measurements.forEach((measurement, index) => {
      text += `–ò–∑–º–µ—Ä–µ–Ω–∏–µ ${index + 1}:\\n`;
      text += `–ù–∞–∑–≤–∞–Ω–∏–µ: ${measurement.name}\\n`;
      text += `–ü–ª–æ—â–∞–¥—å: ${measurement.areaSqMeters.toFixed(1)} –º¬≤ (${measurement.areaSotkas.toFixed(2)} —Å–æ—Ç–æ–∫)\\n`;
      text += `–î–∞—Ç–∞: ${formatDate(measurement.date)}\\n`;
      if (measurement.coordinates) {
        text += `–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç: ${measurement.coordinates.length}\\n`;
      }
      text += '\\n';
    });

    // –°–æ–∑–¥–∞–µ–º –∏ —Å–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    const blob = new Blob([text], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `–∏–∑–º–µ—Ä–µ–Ω–∏—è_–∑–µ–º–ª–∏_${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
    
    toast.success('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª');
  };

  const addTestMeasurement = () => {
    const testMeasurement = {
      id: Date.now().toString(),
      name: '–¢–µ—Å—Ç–æ–≤—ã–π —É—á–∞—Å—Ç–æ–∫',
      areaSqMeters: 1000,
      areaSotkas: 10,
      date: new Date().toISOString(),
      coordinates: [
        { lat: 55.7558, lng: 37.6173 },
        { lat: 55.7568, lng: 37.6183 },
        { lat: 55.7548, lng: 37.6193 }
      ]
    };
    
    const measurements = loadMeasurements();
    measurements.push(testMeasurement);
    localStorage.setItem('landMeasurements', JSON.stringify(measurements));
    loadData();
    toast.success('–¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');
  };

  return (
    <div className="container mx-auto p-4 space-y-4">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">{t('measurementHistory')}</h1>
        <Link to="/">
          <SoundButton variant="outline" soundType="click">‚Üê {t('home')}</SoundButton>
        </Link>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div className="bg-blue-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-blue-600">{measurements.length}</div>
          <div className="text-sm text-blue-800">–í—Å–µ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏–π</div>
        </div>
        <div className="bg-green-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-green-600">
            {measurements.reduce((sum, m) => sum + m.areaSqMeters, 0).toFixed(0)}
          </div>
          <div className="text-sm text-green-800">–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (–º¬≤)</div>
        </div>
        <div className="bg-yellow-50 p-4 rounded-lg text-center">
          <div className="text-2xl font-bold text-yellow-600">
            {measurements.reduce((sum, m) => sum + m.areaSotkas, 0).toFixed(1)}
          </div>
          <div className="text-sm text-yellow-800">–û–±—â–∞—è –ø–ª–æ—â–∞–¥—å (—Å–æ—Ç–æ–∫)</div>
        </div>
      </div>

      {/* –î–µ–π—Å—Ç–≤–∏—è */}
      <div className="flex gap-2 flex-wrap">
        <Button onClick={exportToText} disabled={measurements.length === 0}>
          üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ç–µ–∫—Å—Ç
        </Button>
        <Button 
          onClick={handleClearAll} 
          variant="destructive"
          disabled={measurements.length === 0}
        >
          üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –≤—Å–µ
        </Button>
        <Button onClick={addTestMeasurement} variant="outline">
          üß™ –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç
        </Button>
        <Button onClick={loadData} variant="outline">
          üîÑ –û–±–Ω–æ–≤–∏—Ç—å
        </Button>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∏–∑–º–µ—Ä–µ–Ω–∏–π */}
      {measurements.length === 0 ? (
        <div className="text-center py-12">
          <div className="text-6xl mb-4">üìè</div>
          <h3 className="text-xl font-semibold mb-2">–ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∏–∑–º–µ—Ä–µ–Ω–∏–π</h3>
          <p className="text-gray-600 mb-4">
            –ù–∞—á–Ω–∏—Ç–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–¥–µ—Å—å
          </p>
          <div className="space-x-2">
            <Link to="/gps-marker-mode">
              <Button>üìç GPS –º–∞—Ä–∫–µ—Ä—ã</Button>
            </Link>
            <Link to="/walking-mode">
              <Button variant="outline">üö∂ –†–µ–∂–∏–º –ø—Ä–æ–≥—É–ª–∫–∏</Button>
            </Link>
          </div>
        </div>
      ) : (
        <div className="space-y-4">
          {measurements.map((measurement) => (
            <div key={measurement.id} className="border rounded-lg p-4 bg-white shadow-sm">
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <h3 className="text-lg font-semibold mb-2">{measurement.name}</h3>
                  
                  <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                    <div>
                      <span className="text-gray-600">–ü–ª–æ—â–∞–¥—å:</span>
                      <div className="font-medium">{measurement.areaSqMeters.toFixed(1)} –º¬≤</div>
                    </div>
                    <div>
                      <span className="text-gray-600">–í —Å–æ—Ç–∫–∞—Ö:</span>
                      <div className="font-medium">{measurement.areaSotkas.toFixed(2)} —Å–æ—Ç–æ–∫</div>
                    </div>
                    <div>
                      <span className="text-gray-600">–î–∞—Ç–∞:</span>
                      <div className="font-medium">{formatDate(measurement.date)}</div>
                    </div>
                    <div>
                      <span className="text-gray-600">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç:</span>
                      <div className="font-medium">
                        {measurement.coordinates ? measurement.coordinates.length : '–ù–µ—Ç'}
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="flex gap-2 ml-4">
                  <Button
                    onClick={() => setSelectedMeasurement(measurement)}
                    size="sm"
                    variant="outline"
                  >
                    üëÅÔ∏è –î–µ—Ç–∞–ª–∏
                  </Button>
                  <Button
                    onClick={() => handleDelete(measurement.id)}
                    size="sm"
                    variant="destructive"
                  >
                    üóëÔ∏è
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* –î–∏–∞–ª–æ–≥ —Å –¥–µ—Ç–∞–ª—è–º–∏ */}
      {selectedMeasurement && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold">–î–µ—Ç–∞–ª–∏ –∏–∑–º–µ—Ä–µ–Ω–∏—è</h3>
              <Button 
                onClick={() => setSelectedMeasurement(null)}
                variant="ghost"
                size="sm"
              >
                ‚úï
              </Button>
            </div>
            
            <div className="space-y-3">
              <div>
                <span className="text-gray-600">–ù–∞–∑–≤–∞–Ω–∏–µ:</span>
                <div className="font-medium">{selectedMeasurement.name}</div>
              </div>
              <div>
                <span className="text-gray-600">–ü–ª–æ—â–∞–¥—å:</span>
                <div className="font-medium">
                  {selectedMeasurement.areaSqMeters.toFixed(1)} –º¬≤ 
                  ({selectedMeasurement.areaSotkas.toFixed(2)} —Å–æ—Ç–æ–∫)
                </div>
              </div>
              <div>
                <span className="text-gray-600">–î–∞—Ç–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è:</span>
                <div className="font-medium">{formatDate(selectedMeasurement.date)}</div>
              </div>
              {selectedMeasurement.coordinates && (
                <div>
                  <span className="text-gray-600">–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã ({selectedMeasurement.coordinates.length} —Ç–æ—á–µ–∫):</span>
                  <div className="max-h-32 overflow-y-auto text-xs mt-1 space-y-1">
                    {selectedMeasurement.coordinates.map((coord, index) => (
                      <div key={index} className="bg-gray-100 p-1 rounded">
                        {index + 1}: {coord.lat.toFixed(6)}, {coord.lng.toFixed(6)}
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default MeasurementHistorySimple;
