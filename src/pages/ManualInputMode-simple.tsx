import React, { useState } from 'react';
import { useTranslation } from 'react-i18next';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Link } from 'react-router-dom';
import { convertSqMetersToSotkas } from '@/utils/geometry';
import { toast } from 'sonner';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è
const saveMeasurement = (name: string, areaSqMeters: number, areaSotkas: number) => {
  try {
    console.log('Manual: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ—Ä–µ–Ω–∏—è:', { name, areaSqMeters, areaSotkas });
    
    const measurements = JSON.parse(localStorage.getItem('landMeasurements') || '[]');
    console.log('Manual: –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–º–µ—Ä–µ–Ω–∏—è:', measurements);
    
    const newMeasurement = {
      id: Date.now().toString(),
      name: name || `–†—É—á–Ω–æ–π –≤–≤–æ–¥ –æ—Ç ${new Date().toLocaleDateString()}`,
      areaSqMeters,
      areaSotkas,
      date: new Date().toISOString(),
      coordinates: [] // –î–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –Ω–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    };
    
    console.log('Manual: –ù–æ–≤–æ–µ –∏–∑–º–µ—Ä–µ–Ω–∏–µ:', newMeasurement);
    
    measurements.push(newMeasurement);
    localStorage.setItem('landMeasurements', JSON.stringify(measurements));
    
    console.log('Manual: –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ localStorage:', JSON.parse(localStorage.getItem('landMeasurements') || '[]'));
    
    return true;
  } catch (error) {
    console.error('Manual: –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:', error);
    return false;
  }
};

const ManualInputModeSimple = () => {
  const { t } = useTranslation();
  const [sqMetersInput, setSqMetersInput] = useState<string>('');
  const [hectaresInput, setHectaresInput] = useState<string>('');
  const [calculatedSotkas, setCalculatedSotkas] = useState<number>(0);
  const [calculatedSqMeters, setCalculatedSqMeters] = useState<number>(0);
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  const [saveName, setSaveName] = useState('');

  const convertAndSetSotkas = (sqM: number) => {
    if (isNaN(sqM) || sqM < 0) {
      setCalculatedSotkas(0);
      setCalculatedSqMeters(0);
      return;
    }
    setCalculatedSqMeters(sqM);
    setCalculatedSotkas(convertSqMetersToSotkas(sqM));
  };

  const handleSqMetersChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setSqMetersInput(value);
    const numValue = parseFloat(value);

    if (value === '' || isNaN(numValue)) {
      setHectaresInput('');
      convertAndSetSotkas(0);
      return;
    }

    if (numValue < 0) {
      toast.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥');
      setHectaresInput('');
      convertAndSetSotkas(0);
      return;
    }

    setHectaresInput((numValue / 10000).toFixed(4));
    convertAndSetSotkas(numValue);
  };

  const handleHectaresChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    setHectaresInput(value);
    const numValue = parseFloat(value);

    if (value === '' || isNaN(numValue)) {
      setSqMetersInput('');
      convertAndSetSotkas(0);
      return;
    }

    if (numValue < 0) {
      toast.error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥');
      setSqMetersInput('');
      convertAndSetSotkas(0);
      return;
    }

    const sqMeters = numValue * 10000;
    setSqMetersInput(sqMeters.toString());
    convertAndSetSotkas(sqMeters);
  };

  const handleSave = () => {
    if (calculatedSqMeters === 0) {
      toast.error('–í–≤–µ–¥–∏—Ç–µ –ø–ª–æ—â–∞–¥—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      return;
    }
    setShowSaveDialog(true);
  };

  const confirmSave = () => {
    if (saveMeasurement(saveName, calculatedSqMeters, calculatedSotkas)) {
      toast.success('–ò–∑–º–µ—Ä–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!');
      setShowSaveDialog(false);
      setSaveName('');
      // –û—á–∏—â–∞–µ–º –ø–æ–ª—è
      setSqMetersInput('');
      setHectaresInput('');
      setCalculatedSqMeters(0);
      setCalculatedSotkas(0);
    } else {
      toast.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏');
    }
  };

  return (
    <div className="container mx-auto p-4 space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-2xl font-bold">{t('manualInputMode')}</h1>
        <Link to="/">
          <Button variant="outline">‚Üê {t('home')}</Button>
        </Link>
      </div>

      <div className="max-w-md mx-auto space-y-6">
        {/* –í–≤–æ–¥ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–µ—Ç—Ä–∞—Ö */}
        <div className="space-y-2">
          <label htmlFor="sqmeters" className="text-sm font-medium">
            –ü–ª–æ—â–∞–¥—å –≤ –º¬≤
          </label>
          <Input
            id="sqmeters"
            type="number"
            value={sqMetersInput}
            onChange={handleSqMetersChange}
            placeholder="100"
            className="text-lg"
          />
        </div>

        {/* –í–≤–æ–¥ –≤ –≥–µ–∫—Ç–∞—Ä–∞—Ö */}
        <div className="space-y-2">
          <label htmlFor="hectares" className="text-sm font-medium">
            –ü–ª–æ—â–∞–¥—å –≤ –≥–µ–∫—Ç–∞—Ä–∞—Ö
          </label>
          <Input
            id="hectares"
            type="number"
            step="0.0001"
            value={hectaresInput}
            onChange={handleHectaresChange}
            placeholder="0.0100"
            className="text-lg"
          />
        </div>

        {/* –†–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–æ—Ç–∫–∞—Ö */}
        {calculatedSotkas > 0 && (
          <div className="text-center p-6 bg-green-50 rounded-lg">
            <h3 className="text-lg font-semibold mb-2">–ü–ª–æ—â–∞–¥—å –≤ —Å–æ—Ç–∫–∞—Ö:</h3>
            <div className="text-3xl font-bold text-green-600">
              {calculatedSotkas.toFixed(2)} —Å–æ—Ç–æ–∫
            </div>
            <div className="text-sm text-gray-600 mt-2">
              {calculatedSqMeters.toFixed(1)} –º¬≤ = {(calculatedSqMeters / 10000).toFixed(4)} –≥–∞
            </div>
          </div>
        )}

        {/* –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
        <Button 
          onClick={handleSave} 
          disabled={calculatedSqMeters === 0}
          className="w-full bg-green-600 hover:bg-green-700"
          size="lg"
        >
          üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ò–∑–º–µ—Ä–µ–Ω–∏–µ
        </Button>

        {/* –°–ø—Ä–∞–≤–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
        <div className="bg-blue-50 p-4 rounded-lg text-sm">
          <h4 className="font-semibold mb-2">–°–ø—Ä–∞–≤–∫–∞ –ø–æ –µ–¥–∏–Ω–∏—Ü–∞–º –∏–∑–º–µ—Ä–µ–Ω–∏—è:</h4>
          <ul className="space-y-1 text-gray-700">
            <li>‚Ä¢ 1 —Å–æ—Ç–∫–∞ = 100 –º¬≤</li>
            <li>‚Ä¢ 1 –≥–µ–∫—Ç–∞—Ä = 10,000 –º¬≤ = 100 —Å–æ—Ç–æ–∫</li>
            <li>‚Ä¢ 1 –º¬≤ = 0.01 —Å–æ—Ç–æ–∫</li>
          </ul>
        </div>
      </div>

      {/* –î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è */}
      {showSaveDialog && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50">
          <div className="bg-white rounded-lg p-6 max-w-md w-full">
            <h3 className="text-lg font-semibold mb-4">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ—Ä–µ–Ω–∏–µ</h3>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium mb-1">–ù–∞–∑–≤–∞–Ω–∏–µ —É—á–∞—Å—Ç–∫–∞:</label>
                <Input
                  value={saveName}
                  onChange={(e) => setSaveName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –î–∞—á–Ω—ã–π —É—á–∞—Å—Ç–æ–∫"
                  className="w-full"
                />
              </div>
              
              <div className="bg-gray-50 p-3 rounded text-sm">
                <div>–ü–ª–æ—â–∞–¥—å: {calculatedSqMeters.toFixed(1)} –º¬≤</div>
                <div>–í —Å–æ—Ç–∫–∞—Ö: {calculatedSotkas.toFixed(2)} —Å–æ—Ç–æ–∫</div>
                <div>–í –≥–µ–∫—Ç–∞—Ä–∞—Ö: {(calculatedSqMeters / 10000).toFixed(4)} –≥–∞</div>
              </div>
            </div>
            
            <div className="flex gap-2 mt-6">
              <Button onClick={() => setShowSaveDialog(false)} variant="outline" className="flex-1">
                –û—Ç–º–µ–Ω–∞
              </Button>
              <Button onClick={confirmSave} className="flex-1 bg-green-600 hover:bg-green-700">
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ManualInputModeSimple;
