#!/usr/bin/env python3
"""
HTTPS —Å–µ—Ä–≤–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è GPS –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è "secure origins"
"""

import http.server
import ssl
import socketserver
import os
from pathlib import Path

class HTTPSHandler(http.server.SimpleHTTPRequestHandler):
    def end_headers(self):
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTPS –∏ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è PWA
        self.send_header('Service-Worker-Allowed', '/')
        super().end_headers()

def create_self_signed_cert():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–ª—è HTTPS"""
    try:
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ OpenSSL
        result = subprocess.run(['openssl', 'version'], 
                              capture_output=True, text=True)
        print(f"OpenSSL –≤–µ—Ä—Å–∏—è: {result.stdout.strip()}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á
        subprocess.run([
            'openssl', 'genrsa', '-out', 'server.key', '2048'
        ], check=True)
        
        # –°–æ–∑–¥–∞–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
        subprocess.run([
            'openssl', 'req', '-new', '-x509', '-key', 'server.key',
            '-out', 'server.crt', '-days', '365', '-subj',
            '/C=RU/ST=State/L=City/O=DevServer/CN=192.168.2.104'
        ], check=True)
        
        print("‚úÖ –°–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω!")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå OpenSSL –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ OpenSSL.")
        return False

def start_https_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç HTTPS —Å–µ—Ä–≤–µ—Ä"""
    PORT = 8443
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
    if not (Path('server.crt').exists() and Path('server.key').exists()):
        print("üîß –°–æ–∑–¥–∞–µ–º SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã...")
        if not create_self_signed_cert():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã")
            return
    
    # –°–æ–∑–¥–∞–µ–º HTTPS —Å–µ—Ä–≤–µ—Ä
    with socketserver.TCPServer(("", PORT), HTTPSHandler) as httpd:
        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ SSL
        context = ssl.SSLContext(ssl.PROTOCOL_TLS_SERVER)
        context.load_cert_chain('server.crt', 'server.key')
        httpd.socket = context.wrap_socket(httpd.socket, server_side=True)
        
        print(f"""
üöÄ HTTPS —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!

üì± –î–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:
   https://192.168.2.104:{PORT}/mobile-gps-fixed.html

‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ –±—Ä–∞—É–∑–µ—Ä –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.
   –ù–∞–∂–º–∏—Ç–µ "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ" ‚Üí "–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç" (–∏–ª–∏ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ)
   
üîß –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ GPS –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å!

–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C
        """)
        
        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    start_https_server()
